VER = "0.0.1"
DATE = "2022-01-09"
AUTHOR = "Owen Bowden"

import os, sys, json, shutil, datetime, webbrowser
from PyQt6.QtCore import QMimeData, QSize, Qt
from PyQt6.QtGui import QAction, QDrag, QPixmap
from PyQt6.QtWidgets import (
	QApplication,
	QDialog,
	QDialogButtonBox,
	QFormLayout,
	QHBoxLayout,
	QLabel,
	QLineEdit,
	QMainWindow,
	QPushButton,
	QToolBar,
	QScrollArea,
	QVBoxLayout,
	QWidget
)

class MainWindow(QMainWindow):
	def __init__(self):
		super().__init__()

		self.unsaved_changes = False
		self.setWindowTitle("SKMM " + VER)
		self.setAcceptDrops(True)
		self.layout = QVBoxLayout()

		app.aboutToQuit.connect(self.closeEvent)

		self.widget = QWidget()
		self.widget.setLayout(self.layout)

		self.scroll = QScrollArea()
		self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
		self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
		self.scroll.setWidgetResizable(True)
		self.scroll.setWidget(self.widget)

		toolbar = QToolBar()
		toolbar.setMovable(False)
		self.addToolBar(toolbar)

		button_config = QAction("Config", self)
		button_config.setToolTip("Configure SKMM")
		button_config.triggered.connect(self.configClicked)
		toolbar.addAction(button_config)

		button_refresh = QAction("Refresh", self)
		button_refresh.setToolTip("Refresh mod list, adding new ESPs not yet listed.")
		button_refresh.triggered.connect(self.refreshClicked)
		toolbar.addAction(button_refresh)

		button_save = QAction("Save", self)
		button_save.setToolTip("Save current mod list")
		button_save.triggered.connect(self.save)
		toolbar.addAction(button_save)

		button_about = QAction("About", self)
		button_about.setToolTip("About SKMM")
		button_about.triggered.connect(self.aboutClicked)
		toolbar.addAction(button_about)

		self.setGeometry(600, 100, 610, 900)
		centreWindow(self)
		self.setCentralWidget(self.scroll)
		self.show()

	def dragEnterEvent(self, e):
		e.accept()
	
	def dropEvent(self, e):
		window.unsaved_changes = True
		window.setWindowTitle("SKMM " + VER + " *")
		pos = e.position()
		widget = e.source()
		for n in range(self.layout.count()):
			w = self.layout.itemAt(n).widget()
			if pos.y() + window.scroll.verticalScrollBar().value() <= w.y() + w.size().height() // 2:
				self.layout.insertWidget(n-1, widget)
				break
		numbering()
		e.accept()

	def save(self):
		print("Saving mod list...")
		path = config.get("PluginPath")
		shutil.copy(path, path + ".bak")
		print("Previous mod list backed up to: " + path + ".bak")
		dt = datetime.datetime.now()
		with open(path, "w") as f:
			f.write("# Generated by SKMM " + VER + " at " + str(dt) + "\n")
			for n in range(self.layout.count()):
				w = self.layout.itemAt(n).widget()
				if isinstance(w, ModBar):
					f.write(("*" if w.button.property("mod_enabled") else "") + w.button.text() + "\n")
		window.unsaved_changes = False
		window.setWindowTitle("SKMM " + VER)

	def configClicked(self):
		self.config_dialog = ConfigDialog(config)

	def aboutClicked(self):
		self.about_dialog = AboutDialog()
	
	def refreshClicked(self):
		if window.unsaved_changes:
			dlg = SaveWarningDialog("refresh the list")
			if dlg.exec():
				print("Refreshing mod list...")
				genocide()
				populate_ui()

	def closeEvent(self, e):
		if window.unsaved_changes:
			dlg = SaveWarningDialog("quit")
			if not dlg.exec():
				e.ignore()
				return
		e.accept()


class ModBar(QWidget):
	def __init__(self, str):
		super().__init__()
		layout = QHBoxLayout()
		name = str
		color = "#ff0000"
		value = False
		if str.startswith("*"):
			name = str[1:]
			color = "#00ff00"
			value = True
		if str.startswith("@"):
			name = str[1:]
			color = "#0000ff"
			value = False

		drag_label = QLabel(" ðŸ¡™")
		drag_label.setToolTip("Drag to reorder")
		drag_label.setFixedSize(QSize(25, 25))
		drag_label.setAlignment(Qt.AlignmentFlag.AlignVCenter)
		layout.addWidget(drag_label)

		self.button = QPushButton(name)
		self.button.setFixedHeight(25)
		self.button.setProperty("mod_enabled", value)
		self.button.setStyleSheet("color: " + color)
		self.button.clicked.connect(self.toggle)
		layout.addWidget(self.button)

		self.num_label = QLabel("")
		self.num_label.setFixedSize(QSize(40, 25))
		layout.addWidget(self.num_label)

		# self.setStyleSheet("border: 1px solid #ffffff;")
		self.setLayout(layout)

	def toggle(self):
		window.unsaved_changes = True
		window.setWindowTitle("SKMM " + VER + " *")
		self.button.setProperty("mod_enabled", not self.button.property("mod_enabled"))
		self.button.setStyleSheet("color: " + ("#00ff00" if self.button.property("mod_enabled") else "#ff0000"))
		print(self.button.text() + " is now: " + str(self.button.property("mod_enabled")))

	def mouseMoveEvent(self, e):
		if e.buttons() == Qt.MouseButton.LeftButton:
			drag = QDrag(self)
			mime = QMimeData()
			drag.setMimeData(mime)
			pixmap = QPixmap(self.size())
			self.render(pixmap)
			drag.setPixmap(pixmap)
			drag.exec(Qt.DropAction.MoveAction)

class ConfigDialog(QWidget):
	# TODO: Add user-friendly tooltips, filepickers
	def __init__(self, config):
		super().__init__()
		layout = QFormLayout()
		self.config = config
		self.setWindowTitle("SKMM Config")
		self.setGeometry(600, 100, 610, 450)
		centreWindow(self)
		self.setLayout(layout)

		label1 = QLabel("Plugin Path:")
		layout.addWidget(label1)
		self.plugin_line = QLineEdit()
		self.plugin_line.setText(config.get("PluginPath") or "")
		layout.addWidget(self.plugin_line)

		label2 = QLabel("Data Path:")
		layout.addWidget(label2)
		self.data_line = QLineEdit()
		self.data_line.setText(config.get("DataPath"))
		layout.addWidget(self.data_line)

		save_button = QPushButton("Save")
		save_button.clicked.connect(self.save)
		layout.addWidget(save_button)

		self.show()

	def save(self):
		print(self.config.get("PluginPath"))
		print("Saving config...")
		self.config["PluginPath"] = self.plugin_line.text()
		self.config["DataPath"] = self.data_line.text()
		json.dump(self.config, open("./config.json", "w"), indent=4)
		print("Config saved.")
		config = parse_config()
		genocide()
		populate_ui()
		self.close()

class SaveWarningDialog(QDialog):
	def __init__(self, action):
		super().__init__()
		self.setWindowTitle("Unsaved Changes")

		QBtn = QDialogButtonBox.StandardButton.Yes | QDialogButtonBox.StandardButton.No
		buttonBox = QDialogButtonBox(QBtn)
		buttonBox.accepted.connect(self.accept)
		buttonBox.rejected.connect(self.reject)

		layout = QVBoxLayout()
		message = QLabel("You have unsaved changes. Are you sure you want to " + action + "?")
		layout.addWidget(message)
		layout.addWidget(buttonBox)
		self.setLayout(layout)

class AboutDialog(QWidget):
	def __init__(self):
		super().__init__()
		self.setWindowTitle("About SKMM")
		layout = QVBoxLayout()
		message = QLabel("Version: " + VER + " (" + DATE + ")\n\n" + "Created by: " + AUTHOR)
		button = QPushButton("GitHub")
		button.clicked.connect(self.githubButton)
		layout.addWidget(message)
		layout.addWidget(button)
		self.setLayout(layout)
		centreWindow(self)
		self.show()

	def githubButton(self):
		webbrowser.open("https://github.com/the404devs/skmm", new=2)

class ModDialog(QDialog):
	def __init__(self, str):
		super().__init__()
		self.setWindowTitle("Mods Added/Removed.")

		QBtn = QDialogButtonBox.StandardButton.Ok
		buttonBox = QDialogButtonBox(QBtn)
		buttonBox.accepted.connect(self.accept)
		buttonBox.rejected.connect(self.reject)

		layout = QVBoxLayout()
		message = QLabel(str)
		layout.addWidget(message)
		layout.addWidget(buttonBox)
		self.setLayout(layout)

def parse_config():
	path = "./config.json"
	if not os.path.exists(path):
		print("No config file found, creating one...")
		with open(path, "w") as f:
			f.write("{}")
	with open(path) as f:
		return json.load(f)

def populate_ui():
	plugin_path = config.get("PluginPath")
	if not plugin_path:
		warning = QLabel("No plugin path is set.\nTell SKMM where to find Plugins.txt in the Config menu.")
		warning.setAlignment(Qt.AlignmentFlag.AlignCenter)
		window.layout.addWidget(warning)
	else:
		print("Current path to Plugins.txt: " + plugin_path)
		arr = []
		with open(plugin_path) as f:
			for line in f:
				if not line.startswith("#"):
					# The in-game mod manager adds some commented lines to the top of the file, ignore those.
					arr.append(line.strip())
					bar = ModBar(line.strip())
					window.layout.addWidget(bar)
		dataScan(arr)
		numbering()
		dummy = QLabel(" ")
		dummy.setFixedHeight(5)
		window.layout.addWidget(dummy)

def genocide():
	for n in reversed(range(window.layout.count())):
		window.layout.itemAt(n).widget().setParent(None)

def numbering():
	for n in range(window.layout.count()):
		w = window.layout.itemAt(n).widget()
		if isinstance(w, ModBar):
			w.num_label.setText(str(n))

def centreWindow(window):
	qr = window.frameGeometry()
	cp = window.screen().availableGeometry().center()
	qr.moveCenter(cp)
	window.move(qr.topLeft())

def dataScan(existingModArray):
	print("Scanning data folder...")
	data_path = config.get("DataPath")
	if not data_path:
		print("No data path is set.\nTell SKMM where to find the data folder in the Config menu.")
		return
	print("Current path to data folder: " + data_path)
	for i in range(len(existingModArray)):
		if existingModArray[i].startswith("*"):
			existingModArray[i] = existingModArray[i][1:]

	defaultESM = [
		"Skyrim.esm",
		"Update.esm",
		"Dawnguard.esm",
		"HearthFires.esm",
		"Dragonborn.esm"
	]
	untrackedMods = []
	for file in os.listdir(data_path):
		if (file.endswith(".esp") or file.endswith(".esm") or file.endswith(".esl")) and not file.startswith("cc") and file not in defaultESM:
			print("Found file: " + file)
			try:
				existingModArray.remove(str(file)) # Remove the file if its already listed in plugins.txt
			except ValueError:
				untrackedMods.append(file)
	# Any remaining entries in existingModArray are mods that don't exist in the data folder anymore.

	for n in reversed(range(window.layout.count())):
		w = window.layout.itemAt(n).widget()
		if isinstance(w, ModBar):
			if w.button.text() in existingModArray:
				print(w.button.text() + " is in the plugins.txt file, but not in the data folder.")
				window.layout.removeWidget(w)
				w.setParent(None)
				w.hide()

	for mod in untrackedMods:
		print("Found untracked mod: " + mod)
		bar = ModBar("@"+mod)
		window.layout.addWidget(bar)

	if existingModArray or untrackedMods:
		message = "The following mods are no longer in the data folder:\n" + str(existingModArray) + "\n\n" + "The following untracked mods have been added to the list:\n" + str(untrackedMods)
		dlg = ModDialog(message)
		dlg.exec()

config = parse_config()
app = QApplication(sys.argv)
window = MainWindow()
populate_ui()
app.exec()